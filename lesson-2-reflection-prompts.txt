What happens when you initialize a repository? Why do you need to do it?

  When you initialize a repository, git creates additional (hidden) files
  that track changes to the file(s) included in the repository. This tracking
  enables version control, more creative programming, and greater control
  over the programming environment.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

  The staging area is an intermediate location between the working directory
  and the repository. The staging area allows (and forces) you to think 
  about which files to include in a repository before actually adding 
  them. More careful reflection leads to better decisions.

How can you use the staging area to make sure you have one commit per logical
change?

  Before you do the actual commit, make sure to check the staging area, 
  particularly the difference between the working directory and staging
  area (using the command "git diff" with no arguments). The results wil
  provide a clear list of all the changes that would go into the commit
  if you do it.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

  One situation is where you are trying a different approach to solving
  a programming problem. You can try the different approach, and if it work,
  you merge the experimental branch with the original branch. If not, you 
  go back to the original (master) branch.
  
How do the diagrams help you visualize the branch structure?

  Diagrams allow you to capture every possible type of branching, regardless
  of whether it is linear. You can draw all possible branches and add the 
  name of each one.
  
What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

  The two versions of each file are integrated. An ambiguity is deciding when 
  to use the master version, and to use the other version. The conflict arises 
  whenever there is s difference between the two versions. The diagram resulting
  from "git log --graph --oneline"

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

  Pros: the automatic merging saves the user a great deal of time, because
  many merges involve adding text and lines. The automatic merging also
  flags discrepancies between version, for the user to resolve.
  Cons: The user does not evaluate each individual resolution of differences, 
  which could lead to some inaccuracies.
